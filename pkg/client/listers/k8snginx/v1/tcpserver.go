// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/mohamed-gougam/kube-agent/pkg/apis/k8snginx/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TCPServerLister helps list TCPServers.
type TCPServerLister interface {
	// List lists all TCPServers in the indexer.
	List(selector labels.Selector) (ret []*v1.TCPServer, err error)
	// TCPServers returns an object that can list and get TCPServers.
	TCPServers(namespace string) TCPServerNamespaceLister
	TCPServerListerExpansion
}

// tCPServerLister implements the TCPServerLister interface.
type tCPServerLister struct {
	indexer cache.Indexer
}

// NewTCPServerLister returns a new TCPServerLister.
func NewTCPServerLister(indexer cache.Indexer) TCPServerLister {
	return &tCPServerLister{indexer: indexer}
}

// List lists all TCPServers in the indexer.
func (s *tCPServerLister) List(selector labels.Selector) (ret []*v1.TCPServer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.TCPServer))
	})
	return ret, err
}

// TCPServers returns an object that can list and get TCPServers.
func (s *tCPServerLister) TCPServers(namespace string) TCPServerNamespaceLister {
	return tCPServerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TCPServerNamespaceLister helps list and get TCPServers.
type TCPServerNamespaceLister interface {
	// List lists all TCPServers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.TCPServer, err error)
	// Get retrieves the TCPServer from the indexer for a given namespace and name.
	Get(name string) (*v1.TCPServer, error)
	TCPServerNamespaceListerExpansion
}

// tCPServerNamespaceLister implements the TCPServerNamespaceLister
// interface.
type tCPServerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TCPServers in the indexer for a given namespace.
func (s tCPServerNamespaceLister) List(selector labels.Selector) (ret []*v1.TCPServer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.TCPServer))
	})
	return ret, err
}

// Get retrieves the TCPServer from the indexer for a given namespace and name.
func (s tCPServerNamespaceLister) Get(name string) (*v1.TCPServer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("tcpserver"), name)
	}
	return obj.(*v1.TCPServer), nil
}
