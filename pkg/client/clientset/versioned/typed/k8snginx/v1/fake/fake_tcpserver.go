// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	k8snginxv1 "github.com/mohamed-gougam/kube-agent/pkg/apis/k8snginx/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeTCPServers implements TCPServerInterface
type FakeTCPServers struct {
	Fake *FakeK8sV1
	ns   string
}

var tcpserversResource = schema.GroupVersionResource{Group: "k8s.nginx.org", Version: "v1", Resource: "tcpservers"}

var tcpserversKind = schema.GroupVersionKind{Group: "k8s.nginx.org", Version: "v1", Kind: "TCPServer"}

// Get takes name of the tCPServer, and returns the corresponding tCPServer object, and an error if there is any.
func (c *FakeTCPServers) Get(name string, options v1.GetOptions) (result *k8snginxv1.TCPServer, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(tcpserversResource, c.ns, name), &k8snginxv1.TCPServer{})

	if obj == nil {
		return nil, err
	}
	return obj.(*k8snginxv1.TCPServer), err
}

// List takes label and field selectors, and returns the list of TCPServers that match those selectors.
func (c *FakeTCPServers) List(opts v1.ListOptions) (result *k8snginxv1.TCPServerList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(tcpserversResource, tcpserversKind, c.ns, opts), &k8snginxv1.TCPServerList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &k8snginxv1.TCPServerList{ListMeta: obj.(*k8snginxv1.TCPServerList).ListMeta}
	for _, item := range obj.(*k8snginxv1.TCPServerList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested tCPServers.
func (c *FakeTCPServers) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(tcpserversResource, c.ns, opts))

}

// Create takes the representation of a tCPServer and creates it.  Returns the server's representation of the tCPServer, and an error, if there is any.
func (c *FakeTCPServers) Create(tCPServer *k8snginxv1.TCPServer) (result *k8snginxv1.TCPServer, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(tcpserversResource, c.ns, tCPServer), &k8snginxv1.TCPServer{})

	if obj == nil {
		return nil, err
	}
	return obj.(*k8snginxv1.TCPServer), err
}

// Update takes the representation of a tCPServer and updates it. Returns the server's representation of the tCPServer, and an error, if there is any.
func (c *FakeTCPServers) Update(tCPServer *k8snginxv1.TCPServer) (result *k8snginxv1.TCPServer, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(tcpserversResource, c.ns, tCPServer), &k8snginxv1.TCPServer{})

	if obj == nil {
		return nil, err
	}
	return obj.(*k8snginxv1.TCPServer), err
}

// Delete takes name of the tCPServer and deletes it. Returns an error if one occurs.
func (c *FakeTCPServers) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(tcpserversResource, c.ns, name), &k8snginxv1.TCPServer{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeTCPServers) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(tcpserversResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &k8snginxv1.TCPServerList{})
	return err
}

// Patch applies the patch and returns the patched tCPServer.
func (c *FakeTCPServers) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *k8snginxv1.TCPServer, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(tcpserversResource, c.ns, name, pt, data, subresources...), &k8snginxv1.TCPServer{})

	if obj == nil {
		return nil, err
	}
	return obj.(*k8snginxv1.TCPServer), err
}
